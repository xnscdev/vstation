#!/usr/bin/env python3

# main.c -- This file is part of VStation.
# Copyright (C) 2022 XNSC
#
# VStation is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# VStation is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with VStation. If not, see <https://www.gnu.org/licenses/>.

import asyncio
import base64
import json
import libvirt
import os
from pathlib import Path
import subprocess
import sys
import time
import traceback
import websockets
from xml.dom import minidom

PORT = 5962
next_port = 11624

class VSException(Exception):
    pass

def yn(x):
    if x:
        return 'Yes'
    else:
        return 'No'

def get_port():
    global next_port
    port = next_port
    next_port += 1
    return port

def get_size(path):
    total_size = 0
    for dirpath, dirnames, filenames in os.walk(path):
        for f in filenames:
            fp = os.path.join(dirpath, f)
            if not os.path.islink(fp):
                total_size += os.path.getsize(fp)
    return total_size

def get_machines():
    m = []
    for name in machines:
        m.append(name)
    return {'machines': m}

def start_machine(name):
    try:
        dom = conn.lookupByName(name)
        if dom.state()[0] == libvirt.VIR_DOMAIN_SHUTOFF:
            if dom.create() == -1:
                raise VSException('Failed to start machine')
            elif dom.state()[0] != libvirt.VIR_DOMAIN_RUNNING:
                raise VSException('Machine is in unknown state')
    except libvirt.libvirtError as e:
        raise VSException(repr(e))
    return {}

def setup_conn(name):
    try:
        desc = machines[name]
        if not desc['ws']:
            ws = get_port()
            args = [
                sys.executable,
                '-m',
                'websockify',
                str(ws),
                'localhost:' + str(desc['vnc'])
            ]
            try:
                p = subprocess.Popen(args, stderr=subprocess.PIPE)
            except OSError:
                raise VSException('Failed to run websockify')

            timeout = 15
            timeout_start = time.time()
            while time.time() < timeout_start + timeout:
                line = p.stderr.readline()
                if line and 'proxying' in str(line):
                    break
            if time.time() >= timeout_start + timeout:
                raise VSException('Timeout in connecting to socket')

            desc['process'] = p
            desc['ws'] = ws
        return {'port': desc['ws'], 'fxf': True if desc['fxf'] else False}
    except KeyError:
        raise VSException('No machine found with name ' + name)

def do_fxf(machine, contents, filename):
    try:
        fxf_dir = machines[machine]['fxf']
    except KeyError:
        raise VSException('Machine does not support file transfers')
    new_size = get_size(fxf_dir) + len(contents)
    if new_size >= 0x40000000:
        raise VSException('File transfer directory exceeds maximum size')

    count = 0
    suffix = ''
    while True:
        try:
            fname = fxf_dir + '/' + filename + suffix
            with open(fname, 'xb') as f:
                f.write(contents.encode())
            return {'filename': filename + suffix}
        except FileExistsError:
            suffix = '.' + str(count)
            count += 1
        except BaseException as e:
            raise VSException('Failed to write file to remote disk') from e

def fetch(machine, path):
    try:
        fxf_dir = machines[machine]['fxf']
    except KeyError:
        raise VSException('Machine does not support file transfers')
    root = Path(fxf_dir)
    child = root / path
    child = child.resolve()
    if root not in child.parents and root != child:
        raise VSException('Attempted to fetch file outside root directory')
    try:
        files = os.listdir(child)
        new_path = child.relative_to(root)
        return {'type': 'dir', 'path': str(new_path), 'files': files}
    except NotADirectoryError:
        try:
            with open(child, 'rb') as f:
                data = f.read()
            data = base64.b64encode(data).decode()
            return {'type': 'file', 'name': child.name, 'data': data}
        except BaseException as e:
            raise VSException('Failed to read file contents: ' + repr(e))

async def send_failure(ws, id, msg):
    await ws.send(json.dumps({
        'id': id,
        'success': False,
        'error': msg
    }))

async def send_success(ws, id, obj):
    obj['id'] = id
    obj['success'] = True
    await ws.send(json.dumps(obj))

async def do_action(ws, id, f):
    try:
        obj = f()
        await send_success(ws, id, obj)
    except VSException as e:
        await send_failure(ws, id, str(e))
    except:
        traceback.print_exc()

async def handle(ws, path):
    while True:
        raw = await ws.recv()
        print(raw)
        msg = json.loads(raw)
        if msg['request'] == 'machines':
            await do_action(ws, msg['id'], get_machines)
        elif msg['request'] == 'start':
            await do_action(ws, msg['id'], lambda: start_machine(msg['name']))
        elif msg['request'] == 'setup-ws':
            await do_action(ws, msg['id'], lambda: setup_conn(msg['name']))
        elif msg['request'] == 'upload':
            await do_action(ws, msg['id'],
                            lambda: do_fxf(msg['name'], msg['contents'],
                                           msg['filename']))
        elif msg['request'] == 'fetch':
            await do_action(ws, msg['id'],
                            lambda: fetch(msg['name'], msg['path']))

if __name__ == '__main__':
    try:
        print('Connecting to hypervisor...')
        conn = libvirt.open('qemu:///system')

        print('Querying available machines...')
        names = conn.listDefinedDomains()
        if names is None:
            raise VSException('Failed to obtain domain name list')
        ids = conn.listDomainsID()
        if ids is None:
            raise VSException('Failed to obtain domain ID list')
        for id in ids:
            dom = conn.lookupByID(id)
            names.append(dom.name())

        machines = {}
        for name in names:
            dom = conn.lookupByName(name)
            raw_xml = dom.XMLDesc(0)
            xml = minidom.parseString(raw_xml)
            for g in xml.getElementsByTagName('graphics'):
                if (g.getAttribute('type') == 'vnc' and
                    g.getAttribute('autoport') == 'no'):
                    fxf = None
                    for fs in xml.getElementsByTagName('filesystem'):
                        target = fs.getElementsByTagName('target')[0]
                        if str(target.getAttribute('dir')) == '/vstation_fxf':
                            source = fs.getElementsByTagName('source')[0]
                            fxf = source.getAttribute('dir')
                            break
                    port = int(g.getAttribute('port'))
                    machines[name] = {
                        'vnc': port,
                        'ws': None,
                        'process': None,
                        'fxf': fxf
                    }
                    break

        print('Found machines:')
        print('%-16s %-5s %-3s' % ('Name', 'Port', 'FXF'))
        for name, desc in machines.items():
            print('%-16s %-5d %-3s' % (name, desc['vnc'], yn(desc['fxf'])))
    except libvirt.libvirtError as e:
        print(repr(e), file=sys.stderr)
        exit(1)

    start_server = websockets.serve(handle, 'localhost', PORT)
    asyncio.get_event_loop().run_until_complete(start_server)
    asyncio.get_event_loop().run_forever()
